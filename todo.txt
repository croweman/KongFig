
SECURING THE APP and client args
Mongo ssl? client and server (configurable server level)
https://www.mongodb.com/blog/post/how-to-avoid-a-malicious-attack-that-ransoms-your-data

Should not be storing assemblies in git!

For clients, in either scenario should probably await retrieved callback in
case this does stuff with configuration!!!

Document retrieved callback must be awaits!!!!

Document within time window validation!!!! should this be more configurable
turn offable?

Keys should be 32 character base 64 strings!!!!!!!!!!
should this be validated everywhere too!
whereever HASHER IS USED AS CONVERTS FROM BASE 64 NEEDS TO HAPPEN IN NODE TOO
NODE TESTS
AND INTEGRATION TESTS

clients should not refresh if refresh already in progress!
refresh failure should be called in all cases where failure and not initiqlized

when comparing should also show version number diff??????

when building packages remove tests!!!

how come when kicking off (generating certs) previous configs still work?
keys should be different right!!!????

https://github.com/node-nock/nock/issues/925
matchHEader

don't pull bootstrapper and assets from cdn have local?
https://getbootstrap.com/docs/4.0/components/alerts/
https://v4-alpha.getbootstrap.com/examples/jumbotron/

package.lock.json!!!!

snyk  etc

client todo - refresh eventand revision id (configurationId)?


does node module throw exception if can't decrypt!

https://v4-alpha.getbootstrap.com/components/forms/#custom-forms


https://stackoverflow.com/questions/26773767/purpose-of-installing-bootstrap-through-npm

html2pug < test.html > test.pug

** TEAMS, team id link, models, repo, indexes
canCreateTeam

server
KONFIG_RUN_OVER_HTTP=true
if testing non secure cookies!!!

exec('openssl genrsa -out ./server/sec/elency-config.private.pem 2048');

OR

*************************
create example project that just refreshes every 500 ms and logs out revisition id and keys, values
on refresh event, logs if changed etc
*************************

-- should use -des3
 exec('openssl genrsa -des3 -out ./server/sec/elency-config.private.pem 2048');

exec('openssl rsa -in ./server/sec/elency-config.private.pem -outform PEM -pubout -out ./server/sec/elency-config.public.pem');

** VAULT ** - https://spring.io/blog/2016/06/24/managing-secrets-with-vault

bodyparser, json
response headers
cors

hmac and public private top level
overriden per app if required, middleware etc will need to cater for that!

client double encryption thing

hmac keys should be Base64 encoded!

do not duplicate modules!!!!!!!! like auth
blah blah, put shared in seperate lib folder??

sample mongo structure for  aversioned config

app collection:

{
    appId: 'guid',
    versions: [
    '1.1.1',
    '1.1.2'
    ]
}

configration collection:
{
    appId: 'guid',
    appVersion: '1.1.1',
    configuration: [
        {
            key: 'thekey',
            value: 'thevalue',
            secure: 'true'
        }
    ],
    configurationHash: 'theconfigurationhash'
}

users, roles, permissions/app

GEt config, now a POST rather than get, all
nocks need updating
HEAD needs auth but no access token
mongo indexes:

- configuration versions with hashes
- access tokens
- users
- roles

client

IN TESTS LOGS OF UNHANDLED PROMISE REJECTIONS!!!!!??????
WHEN MAKiNG test take too long, add following to global spec to reproduce
http://thecodebarbarian.com/unhandled-promise-rejections-in-node.js.html
it only on particular test too! to understand cause

console.logs!

nested error.error structure!!

handle debugs when errors etc, log errors?, logger?, enable/disable

afterEach((done) => {
  setTimeout(() => { done(); }, 500);
});

- async/await (try catch though in case of failure)
- what if refresh fails is there an error callback you can hook up????????? (tests)
- debug for errors, not console logs
- use constants rather than hard coded string messages, reference in tests

- need to refresh authorization token on subsequent requests not just init!!!!

- post endpoint to get access token (stored in mongo with expiry of 30 seconds)
- access token should be a hashed guid!!!
- server searches for this and deletes on usage,
- server timer that clears these out once a minute
- version in get endpoint
  1.1, 1.1.1, 1.1.1.1
- server version equals or less than or equals!!
- version hash !!!!!!, body.configurationHash,
  should be required argument on initialization and validated format!!!
- validate time stamps within a duration

- all routes should have authorization header based on path!!!, handled by server middleware

- server returns data encrypted with public key, client decrypts with private key
- what to do about errors on refresh

===========
Docker intergration tests with mongo and basic server routes
HEad GET and Post route etc
===========


server

debug for logs

Users

password encryption ???

Roles

What can each role do

Public key service, Private key client

Encryption key configured


Groups
Projects
Environment
Configuration, type etc encrypted


Permissions
Change sets approval


Client (initially node and c#)

head request before pulling down and decrypting config, with hash query or header
looks for status code

options {
server
app -  app has a unique id!!! can be defined, but must be unique across suite of projects in data
store

environment
refreshInterval: default 1 hour,
private key file path
}

errors and dies if cannot communicate or dies

appId does not exist
environment does not exist

using (var cryptoProvider = new RNGCryptoServiceProvider())
	{
		byte[] secretKeyByteArray = new byte[32]; //256 bit
		cryptoProvider.GetBytes(secretKeyByteArray);
		var APIKey = Convert.ToBase64String(secretKeyByteArray);
	}

key/value store (string values)

Certain roles can see keys

Public private key,
key for envrypted variables on server data store
key defined on server per app and client for hmac authorization header
AppId: Unique per app

[Authorization: amx APPId:Signature:Nonce:Timestamp]
timestamp unix time
appid:asdlfkjasldfjalksdj:method:get:nonce:guid,signature:asdflkjasdlkfjlkasdjf
apps


integration could use docker compose etc, bring up server real tests!!!

refresh function


// generate 256 key, to base 64, maybe add function to front end to generate keys!!!!!!

	using (var cryptoProvider = new RNGCryptoServiceProvider())
	{
		byte[] secretKeyByteArray = new byte[32]; //256 bit
		cryptoProvider.GetBytes(secretKeyByteArray);
		var APIKey = Convert.ToBase64String(secretKeyByteArray);
	}


c sharp
https://social.msdn.microsoft.com/Forums/en-US/67b50472-b23f-4191-b8f4-e4a696fca5e4/how-to-use-a-public-key-with-rsacryptoserviceprovider-class?forum=csharplanguage

Server:

Must validate hmac
Must lookup app id, environment, blah
server should validate appId in get request is same as header value
and also do hmac
validate timestamp?

first time install prompt for 256 bit key and store in a file, all mongo
data will be encrypted with this, this key could be encrypted using application key

example data:

encrypted: true, means don't show value in ui
public/private key

{
    properties: [
        { key: 'blah', value: 'cheese', encrypted: true }
    ]

}

health indicator endpoint, tests mongo connection, keys etc,
validate timestamp in auth token

global properties

inherit box per project? choose what to inherit?

vault data store?

http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html

adfs integration

config file


https://github.com/punitganshani/KonfDB




!!document how to generate public and private pem key pairs, linux/windows!! -des

README using symantic versions MAJOR.MINOR.PATCH

NO CACHING ON SERVER ROUTES use no-cache middleware